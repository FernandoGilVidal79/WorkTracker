/* 
 * WorkTracker v1
 *
 * WorkTracker API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Clockin
    /// </summary>
    [DataContract]
        public partial class Clockin :  IEquatable<Clockin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Clockin" /> class.
        /// </summary>
        /// <param name="idClockIn">idClockIn.</param>
        /// <param name="fecha">fecha.</param>
        /// <param name="startHour">startHour.</param>
        /// <param name="finishHour">finishHour.</param>
        /// <param name="clockinTypeId">clockinTypeId.</param>
        /// <param name="userId">userId.</param>
        public Clockin(int? idClockIn = default(int?), DateTime? fecha = default(DateTime?), DateTime? startHour = default(DateTime?), DateTime? finishHour = default(DateTime?), int? clockinTypeId = default(int?), int? userId = default(int?))
        {
            this.IdClockIn = idClockIn;
            this.Fecha = fecha;
            this.StartHour = startHour;
            this.FinishHour = finishHour;
            this.ClockinTypeId = clockinTypeId;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets IdClockIn
        /// </summary>
        [DataMember(Name="idClockIn", EmitDefaultValue=false)]
        public int? IdClockIn { get; set; }

        /// <summary>
        /// Gets or Sets Fecha
        /// </summary>
        [DataMember(Name="fecha", EmitDefaultValue=false)]
        public DateTime? Fecha { get; set; }

        /// <summary>
        /// Gets or Sets StartHour
        /// </summary>
        [DataMember(Name="startHour", EmitDefaultValue=false)]
        public DateTime? StartHour { get; set; }

        /// <summary>
        /// Gets or Sets FinishHour
        /// </summary>
        [DataMember(Name="finishHour", EmitDefaultValue=false)]
        public DateTime? FinishHour { get; set; }

        /// <summary>
        /// Gets or Sets ClockinTypeId
        /// </summary>
        [DataMember(Name="clockinTypeId", EmitDefaultValue=false)]
        public int? ClockinTypeId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Clockin {\n");
            sb.Append("  IdClockIn: ").Append(IdClockIn).Append("\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("  StartHour: ").Append(StartHour).Append("\n");
            sb.Append("  FinishHour: ").Append(FinishHour).Append("\n");
            sb.Append("  ClockinTypeId: ").Append(ClockinTypeId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Clockin);
        }

        /// <summary>
        /// Returns true if Clockin instances are equal
        /// </summary>
        /// <param name="input">Instance of Clockin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Clockin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdClockIn == input.IdClockIn ||
                    (this.IdClockIn != null &&
                    this.IdClockIn.Equals(input.IdClockIn))
                ) && 
                (
                    this.Fecha == input.Fecha ||
                    (this.Fecha != null &&
                    this.Fecha.Equals(input.Fecha))
                ) && 
                (
                    this.StartHour == input.StartHour ||
                    (this.StartHour != null &&
                    this.StartHour.Equals(input.StartHour))
                ) && 
                (
                    this.FinishHour == input.FinishHour ||
                    (this.FinishHour != null &&
                    this.FinishHour.Equals(input.FinishHour))
                ) && 
                (
                    this.ClockinTypeId == input.ClockinTypeId ||
                    (this.ClockinTypeId != null &&
                    this.ClockinTypeId.Equals(input.ClockinTypeId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdClockIn != null)
                    hashCode = hashCode * 59 + this.IdClockIn.GetHashCode();
                if (this.Fecha != null)
                    hashCode = hashCode * 59 + this.Fecha.GetHashCode();
                if (this.StartHour != null)
                    hashCode = hashCode * 59 + this.StartHour.GetHashCode();
                if (this.FinishHour != null)
                    hashCode = hashCode * 59 + this.FinishHour.GetHashCode();
                if (this.ClockinTypeId != null)
                    hashCode = hashCode * 59 + this.ClockinTypeId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
