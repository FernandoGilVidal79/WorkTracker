/* 
 * WorkTracker v1
 *
 * WorkTracker API
 *
 * OpenAPI spec version: v1
 * Contact: desarrollo@worktracker.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Absences
    /// </summary>
    [DataContract]
        public partial class Absences :  IEquatable<Absences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Absences" /> class.
        /// </summary>
        /// <param name="idAbsences">idAbsences.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="finishDate">finishDate.</param>
        /// <param name="aproved">aproved.</param>
        /// <param name="denied">denied.</param>
        /// <param name="userId">userId.</param>
        /// <param name="absencesTypeId">absencesTypeId.</param>
        public Absences(int? idAbsences = default(int?), DateTime? startDate = default(DateTime?), DateTime? finishDate = default(DateTime?), bool? aproved = default(bool?), bool? denied = default(bool?), int? userId = default(int?), int? absencesTypeId = default(int?))
        {
            this.IdAbsences = idAbsences;
            this.StartDate = startDate;
            this.FinishDate = finishDate;
            this.Aproved = aproved;
            this.Denied = denied;
            this.UserId = userId;
            this.AbsencesTypeId = absencesTypeId;
        }
        
        /// <summary>
        /// Gets or Sets IdAbsences
        /// </summary>
        [DataMember(Name="idAbsences", EmitDefaultValue=false)]
        public int? IdAbsences { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets FinishDate
        /// </summary>
        [DataMember(Name="finishDate", EmitDefaultValue=false)]
        public DateTime? FinishDate { get; set; }

        /// <summary>
        /// Gets or Sets Aproved
        /// </summary>
        [DataMember(Name="aproved", EmitDefaultValue=false)]
        public bool? Aproved { get; set; }

        /// <summary>
        /// Gets or Sets Denied
        /// </summary>
        [DataMember(Name="denied", EmitDefaultValue=false)]
        public bool? Denied { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets AbsencesTypeId
        /// </summary>
        [DataMember(Name="absencesTypeId", EmitDefaultValue=false)]
        public int? AbsencesTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Absences {\n");
            sb.Append("  IdAbsences: ").Append(IdAbsences).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  FinishDate: ").Append(FinishDate).Append("\n");
            sb.Append("  Aproved: ").Append(Aproved).Append("\n");
            sb.Append("  Denied: ").Append(Denied).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AbsencesTypeId: ").Append(AbsencesTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Absences);
        }

        /// <summary>
        /// Returns true if Absences instances are equal
        /// </summary>
        /// <param name="input">Instance of Absences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Absences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdAbsences == input.IdAbsences ||
                    (this.IdAbsences != null &&
                    this.IdAbsences.Equals(input.IdAbsences))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.FinishDate == input.FinishDate ||
                    (this.FinishDate != null &&
                    this.FinishDate.Equals(input.FinishDate))
                ) && 
                (
                    this.Aproved == input.Aproved ||
                    (this.Aproved != null &&
                    this.Aproved.Equals(input.Aproved))
                ) && 
                (
                    this.Denied == input.Denied ||
                    (this.Denied != null &&
                    this.Denied.Equals(input.Denied))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AbsencesTypeId == input.AbsencesTypeId ||
                    (this.AbsencesTypeId != null &&
                    this.AbsencesTypeId.Equals(input.AbsencesTypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdAbsences != null)
                    hashCode = hashCode * 59 + this.IdAbsences.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.FinishDate != null)
                    hashCode = hashCode * 59 + this.FinishDate.GetHashCode();
                if (this.Aproved != null)
                    hashCode = hashCode * 59 + this.Aproved.GetHashCode();
                if (this.Denied != null)
                    hashCode = hashCode * 59 + this.Denied.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AbsencesTypeId != null)
                    hashCode = hashCode * 59 + this.AbsencesTypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
