/* 
 * WorkTracker v1
 *
 * WorkTracker API
 *
 * OpenAPI spec version: v1
 * Contact: desarrollo@worktracker.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Log
    /// </summary>
    [DataContract]
        public partial class Log :  IEquatable<Log>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Log" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="application">application.</param>
        /// <param name="logged">logged.</param>
        /// <param name="level">level.</param>
        /// <param name="message">message.</param>
        /// <param name="logger">logger.</param>
        /// <param name="callsite">callsite.</param>
        public Log(int? id = default(int?), string application = default(string), DateTime? logged = default(DateTime?), string level = default(string), string message = default(string), string logger = default(string), string callsite = default(string))
        {
            this.Id = id;
            this.Application = application;
            this.Logged = logged;
            this.Level = level;
            this.Message = message;
            this.Logger = logger;
            this.Callsite = callsite;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Logged
        /// </summary>
        [DataMember(Name="logged", EmitDefaultValue=false)]
        public DateTime? Logged { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Logger
        /// </summary>
        [DataMember(Name="logger", EmitDefaultValue=false)]
        public string Logger { get; set; }

        /// <summary>
        /// Gets or Sets Callsite
        /// </summary>
        [DataMember(Name="callsite", EmitDefaultValue=false)]
        public string Callsite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Log {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Logged: ").Append(Logged).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Logger: ").Append(Logger).Append("\n");
            sb.Append("  Callsite: ").Append(Callsite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Log);
        }

        /// <summary>
        /// Returns true if Log instances are equal
        /// </summary>
        /// <param name="input">Instance of Log to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Log input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Logged == input.Logged ||
                    (this.Logged != null &&
                    this.Logged.Equals(input.Logged))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Logger == input.Logger ||
                    (this.Logger != null &&
                    this.Logger.Equals(input.Logger))
                ) && 
                (
                    this.Callsite == input.Callsite ||
                    (this.Callsite != null &&
                    this.Callsite.Equals(input.Callsite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.Logged != null)
                    hashCode = hashCode * 59 + this.Logged.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Logger != null)
                    hashCode = hashCode * 59 + this.Logger.GetHashCode();
                if (this.Callsite != null)
                    hashCode = hashCode * 59 + this.Callsite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
